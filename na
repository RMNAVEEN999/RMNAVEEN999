const express = require("express");
const app = express();
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");
const bcrypt = require(bcrypt);
const dbPath = path.join(__dirname, "userData.db");
let db = null;

const crateDataBaseResponse = async (request, response) => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("SERVER RUNNING http://localhost:3000/");
    });
  } catch (e) {
    console.log(`Error:${e.message}`);
    process.exit(1);
  }
};

crateDataBaseResponse();



app.post("/user/",async(request,response)=>{
    const{username,password,gender,name,location} request.body;
    const hashPassword = await bcrypt.hash(request.body.password,10);
    const selectQuery = `SELECT * FROM user WHERE username = ${username};`;
    const dbUser = await db.run(selectQuery);
    if(dbUser === undefined){
        const crateDataTable = `INSERT INTO 
            user(username,hashPassword,gender,name,location)
            VALUES
            username = '${username}',
            hashPassword = '${hashPassword}',
            name = '${name}',
            gender = '${gender}'
            location = '${location}'
        ;`;
        const dbResponse = await db.run(crateDataTable);
        const newId = dbResponse.lastId,
        response.send(`{newId}`);
    }else{
        response.status(400);
        response.send("User already exists")
    }
});

app.post("/login/",async(request,response)=>{
    const{username,password} = request.body;
    const SelectQuery = `SELECT * FROM user WHERE username = ${username};`;
    const DataUser = await db.run(SelectQuery);
    if(DataUser === undefined){
        response.status(400);
        response.send("Invalid user");
    }else{
        const isMatchPassword = await bcrypt.compare(password,DataUser.password);
        if(isMatchPassword === true){
            response.send("login Successfully");
        }else{
            response.status(400);
            response.send("Invalid password")
        }
    }

})


app.put("/change-password/",async(request,response)=>{
    const{username,oldPassword,newPassword} = request.body;
    const Query = `SELECT * FROM user WHERE username = ${username};`;
    const UserData = await db.run(Query);
    if(UserData === undefined){
        response.status(400);
        response.send("Invalid user");
    }
    else{
        const isMatchPassword = await bcrypt.compare(password,UserData.password);
        if(isMatchPassword === true){
            response.send("login successfully");
        }else{
            response.status(400);
            response.send("Invalid password");
        }
    }
    else{
        const isMatchPassword = await bcrypt.compare(password,UserData.password);
        if(isMatchPassword === true){
            response.send("login successfully");
        }else{
            response.status(400);
            response.send("Invalid password");
        }
    }
})



























